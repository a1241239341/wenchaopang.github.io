<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 超超的CodingLife</title>
    <link>http://wenchaopang.vip/post/</link>
    <description>Recent content in Posts on 超超的CodingLife</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sat, 23 Nov 2019 20:40:21 +0800</lastBuildDate>
    
	<atom:link href="http://wenchaopang.vip/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>3.HTML常用标签</title>
      <link>http://wenchaopang.vip/post/3.html%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Sat, 23 Nov 2019 20:40:21 +0800</pubDate>
      
      <guid>http://wenchaopang.vip/post/3.html%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>a 标签 超链接 a 标签  属性  href 超链接 target 在哪个窗口打开链接 download 下载链接 rel=noopener 防止一个 bug  作用  跳转外部页面 跳转内部锚点 跳转到邮箱或电话等   例如：
&amp;lt;p&amp;gt; I&#39;m creating a link to &amp;lt;a href=&amp;quot;https://www.mozilla.org/en-US/&amp;quot;&amp;gt;the Mozilla homepage&amp;lt;/a&amp;gt;. &amp;lt;/p&amp;gt;  结果如下所示： I&amp;rsquo;m creating a link to the Mozilla homepage.
a 的 href 的取值  网址  https://google.com http://google.com //google.com  路径  /a/b/c 以及 a/b/c index.html 以及./index.html  伪协议  javascript:代码； mailto：邮箱 tel：手机号  id  href=#xxx   a 的 target 的取值  内置名字：  _blank 在空白页面打开 _top 在最顶层页面打开（有两个窗口） _parent 在当前链接的页面的上一层打开 _self 在当前页面打开  程序员命名：  window 的 name iframe 的 name   a 的 download  作用  不是打开页面，而是下载页面  问题</description>
    </item>
    
    <item>
      <title>2.HTML入门笔记1</title>
      <link>http://wenchaopang.vip/post/2.html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 18 Nov 2019 20:40:21 +0800</pubDate>
      
      <guid>http://wenchaopang.vip/post/2.html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description> 谁发明了HTML 历史 1990年左右诞生  Tim Berners-Lee,被人们称为李爵士 2004年，英国女皇为他颁发大英帝国爵级司令勋章 2017年，被颁发图灵奖
李爵士做了什么贡献 自己写了第一个浏览器
 自己写了第一个服务器
 用自己写的浏览器访问了自己写的服务器
 发明了WWW，同时发明了HTML、HTTP和URL
  HTML起手应该写什么 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  常用的章节标签有哪些 表示文章/书的层级  标题 h1~h6 章节 section 文章 article 段落 p 头部 header 脚部 footer 主要内容 main 旁支内容 aside 划分 div  全局属性有哪些 所有标签都有全局属性  class 标签 contenteditable 可编辑的 hidden 让这部分内容看不见 id id=&amp;ldquo;xxx&amp;rdquo; 唯一 style 每一个元素可以写一个style属性 tabindex tab键盘切换 title 显示完整内容  内容标签  ol+li (ordered list+list item) 有序列表 ul+li (unordered list+list item) 无序列表 dl+dt+dd (description list+term+data) 描述列表 pre (preview的缩写) 保留空格标签 hr 分割线 br (break的缩写) 换行 a (anchor的缩写) 超链接 target=&amp;rdquo;_blank&amp;rdquo; 再新标签打开页面 em (emphasis的缩写) 表示强调（语气） strong 表示强调（本身重要） code 写代码 q (quote的缩写) 表示引用 blockquote 表示换行引用  </description>
    </item>
    
    <item>
      <title>1.自我介绍</title>
      <link>http://wenchaopang.vip/post/1.%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 17 Nov 2019 23:40:21 +0800</pubDate>
      
      <guid>http://wenchaopang.vip/post/1.%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</guid>
      <description>大家好 大家好 大家好，我叫庞文超，毕业于河南理工大学，现在转行前端。对于前端这门工作我还是非常喜爱的。每当自己写完代码的时候自己觉得非常有成就感。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://wenchaopang.vip/post/4.css-%E7%9B%92%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wenchaopang.vip/post/4.css-%E7%9B%92%E6%A8%A1%E5%9E%8B/</guid>
      <description>CSS 入门笔记-盒模型 盒模型是什么 作为前端开发的我们，盒模型对于大家来说是非常熟悉的了。这里引用 MDN 官网的解释：
 当你的浏览器展现一个元素时，这个元素会占据一定的空间。这个空间有四部分组成。中间是元素呈现内容的区域。这个区域的外面是内边距，在外面是边框，外边距将该元素与其他元素分开。内边距，边框和外边距在元素的上、右、下、左都可以有不同的大小。所有这些大小值都可以为 0。
 官方的语言比较难懂，我们在 chrome 的控制台的截图说明： 最外面橙色的就是外边距区域（margin area）,往里黄色的是边框区域（border area），再往里的绿色的内边距区域（padding area），最里面绿色的就是内容区域（content area）。
两种盒模型 content-box content-box 内容盒-内容就是盒子的边界 公式：content-box width=内容宽度
border-box border-box 边框盒-边框才是盒子的边界 公式：border-box width=内容宽度+padding+border 最佳实践 为了布局方便，老师建议我们将所有元素都设置为box-sizing:border-box，可以用下面的代码：
html { box-sizing: border-box; } *, *::before, *::after { box-sizing: inherit; }  这种方法称为最佳实践。
以上内容借鉴于张鑫旭博客，MDN 官网，饥人谷方方老师 ppt。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://wenchaopang.vip/post/5.css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wenchaopang.vip/post/5.css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>CSS 知识总结 ps：时间过得好快，转眼间 css 就讲完了，自己就这样懵懵懂懂的呆滞着。有点懵逼。毕竟一边工作一边学习。进度难免跟不上，再操蛋点，公司又有时加班。课程很紧。要努力了，早日摆脱这苦逼的生活。接下来就好好总结下学过的知识吧。
浏览器渲染原理 步骤：
 根据 HTML 构建 HTML 树(DOM) 根据 CSS 构建 CSS 树(CSS OM) 将两棵树合并为一颗渲染树(render tree) Layout 布局(文档型，盒模型，计算大小和位置) Paint 绘制(把边框颜色，文字颜色，阴影等画出来) composite 合成(根据层叠关系展示画面)  CSS 动画的两种做法 transition 过渡 作用：补充中间帧 语法：transition：属性名，时长，过渡方式，延迟
transition: margin-right 4s; transition: margin-right 4s 1s; transition: margin-right 4s ease-in-out; transition: margin-right 4s ease-in-out 1s; transition: margin-right 4s, color 1s; transition: all 0.5s ease-out; transition: inherit; transition: initial; transition: unset;  注意：并不是所有属性都能过渡。
animation 过渡 作用：声明关键帧，添加动画。 @keyframes 完整语法：1.</description>
    </item>
    
  </channel>
</rss>